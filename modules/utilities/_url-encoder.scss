@use 'string-replace' as *;

/// Карта со всеми символами, которые
/// необходимо закодировать.
/// ---
/// @name -characters
/// @access private
/// @since 6.0.0
/// @type Map
$-characters: (
	'!': '%21',
	'#': '%23',
	'$': '%24',
	'&': '%26',
	'\'': '%27',
	'(': '%28',
	')': '%29',
	'*': '%2A',
	'+': '%2B',
	',': '%2C',
	'/': '%2F',
	':': '%3A',
	';': '%3B',
	'=': '%3D',
	'?': '%3F',
	'@': '%40',
	'[': '%5B',
	']': '%5D',
	'"': '%22' // В случае, если результат заключен в двойные кавычки
);

/// Функция `url-encode()` кодирует небезопасные
/// для URL-адреса символы из `$url`
/// ---
/// @name url-encode
/// @group utils:string
/// @access public
/// @since 6.0.0
/// @author Sindre Sorhus
/// @link https://github.com/sindresorhus
/// @example scss - Пример использования
/// 	@debug url-encode('#foo@bar'); //=> %23foo%40bar
/// 	@debug url-encode('https://github.com'); //=> https%3A%2F%2Fgithub.com
/// @param {String} $url - ссылка, символы которой нужно закодировать
/// @return {String} строку с закодированными символами
/// @require {function} string-replace
@function url-encode($url) {

	$ret: $url;

	@each $replaceable, $replacement in $-characters {
		$ret: string-replace($ret, $replaceable, $replacement);
	}

	@return $ret;

}
