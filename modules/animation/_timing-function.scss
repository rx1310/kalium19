@use '../../configs' as *;
@use '../prefixer' as *;
@use '../utilities/is-exist' as *;
@use '../utilities/string-contains' as *;
@use '../@invalid-value-message' as *;

/// Миксин `animation-timing-function()` позволяет сгенерировать
/// свойство `animation-timing-function` с нужными браузерными
/// префиксами.
/// ---
/// @name animation-timing-function
/// @access public
/// @since 6.0.0
/// @author Haba Kudzaev (rx1310)
/// @link https://rx1310.github.io/kalium19
/// @example scss - Пример использования в Sass (SCSS)
/// 	.example {
/// 		@include animation-timing-function(ease-in-out);
/// 	}
///
/// 	.example-cubic-bezier {
/// 		@include animation-timing-function(cubic-bezier(0.1, -0.6, 0.2, 0));
/// 	}
///
/// 	.example-steps {
/// 		@include animation-timing-function(steps(5, end));
/// 	}
/// @example css - Результат в CSS
/// 	.example {
/// 		-webkit-animation-timing-function: ease-in-out;
/// 		-moz-animation-timing-function: ease-in-out;
/// 		-o-animation-timing-function: ease-in-out;
/// 		animation-timing-function: ease-in-out;
/// 	}
///
/// 	.example-cubic-bezier {
/// 		-webkit-animation-timing-function: cubic-bezier(0.1, -0.6, 0.2, 0);
/// 		-moz-animation-timing-function: cubic-bezier(0.1, -0.6, 0.2, 0);
/// 		-o-animation-timing-function: cubic-bezier(0.1, -0.6, 0.2, 0);
/// 		animation-timing-function: cubic-bezier(0.1, -0.6, 0.2, 0);
/// 	}
///
/// 	.example-steps {
/// 		-webkit-animation-timing-function: steps(5, end);
/// 		-moz-animation-timing-function: steps(5, end);
/// 		-o-animation-timing-function: steps(5, end);
/// 		animation-timing-function: steps(5, end);
/// 	}
/// @param {String} $timing-function [$dvalue-animation-timing-function] - значения для CSS-свойства `animation-timing-function`
/// @require {function} is-exist
/// @require {function} string-contains
/// @require {mixin} prefixer
@mixin animation-timing-function($timing-function: $dvalue-animation-timing-function) {

	// Проверяем, есть ли значение `$timing-function` в
	// списке допустимых:
	@if is-exist($vvalues-animation-timing-function, $timing-function) {

		// Если да, то генерируем свойство с помощью
		// миксина `prefixer()` с браузерными префиксами:
		@include prefixer(
			animation-timing-function,
			$timing-function,
			$prefixes-animation-timing-function
		);

	}

	// Но если указывается в `$timing-function` есть `cubic-bezier`
	// или `steps`, то для них генерим отдельно:
	@else if
		string-contains($timing-function, 'cubic-bezier') or
		string-contains($timing-function, 'steps') {

		@include prefixer(
			animation-timing-function,
			$timing-function,
			$prefixes-animation-timing-function
		);

		// ? Почему для `cubic-bezier` и `steps` генерировать
		// ? свойство отдельно?
		// * Дело в том, что функция `is-exist()` проверяет точное
		// * совпадение, в отличии от функции `string-contains()`.
		// * И вот тут вырисовывается, что `cubic-bezier` и `steps`
		// * могут принимать параметры, в отличии от остальных значений
		// * CSS-свойства `animation-timing-function`.

	}

	// И наконец если ничего из `$vvalues-animation-timing-function`
	// не найдено в `$timing-function`, то показываем ошибку:
	@else {
		@include invalid-value-message(
			$vvalues-animation-timing-function,
			animation-timing-function,
			$timing-function
		);
	}

}
