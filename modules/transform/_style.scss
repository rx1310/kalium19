@use '../@invalid-value-message' as *;
@use '../utilities/is-exist' as *;
@use '../prefixer' as *;
@use '../../configs' as *;

/// Миксин `transform-style()` позволяет сгенерировать
/// свойство `transform-style` с нужными браузерными
/// префиксами.
/// ---
/// @name transform-style
/// @access public
/// @since 6.0.0
/// @author Haba Kudzaev (rx1310)
/// @link https://rx1310.github.io/kalium19
/// @example scss - Пример использования в Sass (SCSS)
/// 	.example {
///
/// 		@include transform-style(flat);
///
/// 		// @include transform-style();
/// 		// Можно и без указания значения `flat`, т.к. оно является
/// 		// значением по умолчанию.
///
/// 	}
/// 	.example-preserve-3d {
/// 		@include transform-style(preserve-3d);
/// 	}
/// @example css - Результат в CSS
/// 	.example {
/// 		-webkit-transform-style: flat;
/// 		-moz-transform-style: flat;
/// 		transform-style: flat;
/// 	}
///
/// 	.example-preserve-3d {
/// 		-webkit-transform-style: preserve-3d;
/// 		-moz-transform-style: preserve-3d;
/// 		transform-style: preserve-3d;
/// 	}
/// @param {String} $style [flat] - значения для CSS-свойства `transform-style`
/// @require {function} is-exist
/// @require {mixin} prefixer
@mixin transform-style($style: flat) {

	// С помощью функции `is-exist()` проверяем
	// есть ли в списке допустимых значений
	// `$vvalues-transform-style` значение из `$style`:
	@if is-exist($vvalues-transform-style, $style) {

		// Если `true`, то с помощью миксина `prefixer()`
		// генерируем CSS-свойство `transform-style` со
		// всеми нужными браузерными префиксами:
		@include prefixer(
			transform-style,
			$style,
			$prefixes-transform-style
		);

	}

	// Если значение из `$styles` не присутсвует в списке
	// `$vvalues-transform-style`, ...
	@else {

		// ... то просто выводим ошибку:
		@include invalid-value-message(
			$vvalues-transform-style,
			transform-style,
			$style
		);

	}

}

