@use '../../configs' as *;
@use '../utilities/map-deep-get' as *;
@use '../@invalid-value-message' as *;

/// Миксин `respond-to()` позволяет проще писать
/// медиа-выражения.
/// ---
/// @name respond-to
/// @access public
/// @since 6.0.0
/// @author Haba Kudzaev (rx1310)
/// @link https://rx1310.github.io/kalium19
/// @example scss - Пример использования в Sass (SCSS)
/// 	.example {
/// 		color: red;
///
/// 		@include respond-to(sm) {
/// 			color: green;
/// 		}
///
/// 		@include respond-to(xl) {
/// 			color: blue;
/// 		}
///
/// 	}
/// @example css - Результат в CSS
/// 	.example {
/// 	  color: red;
/// 	}
/// 	@media (min-width: 576px) {
/// 	  .example {
/// 	    color: green;
/// 	  }
/// 	}
/// 	@media (min-width: 1200px) {
/// 	  .example {
/// 	    color: blue;
/// 	  }
/// 	}
/// @param {String | Number} $breakpoint - медиа-запрос из `$breakpoints`
@mixin respond-to($breakpoint) {

	// Если `$breakpoint` существует в
	// карте `$breakpoints`...
	@if map-has-key($breakpoints, $breakpoint) {

		// ... генерируем медиа-выражение:
		@media #{inspect(map-deep-get($breakpoints, $breakpoint))} {
			@content;
		}

	}

	// Если нет, то просто выводим
	// ошибку:
	@else {
		@include invalid-value-message(
			map-keys($breakpoints),
			respont-to,
			$breakpoint
		);
	}

}
